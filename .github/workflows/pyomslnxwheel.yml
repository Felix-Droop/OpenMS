# This is a basic workflow to help you get started with Actions

name: pyopenms-wheels

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ nightly, pyomslnxwheel ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # build-win:
  #   runs-on: windows-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       path: OpenMS
  #   - name: Install Qt
  #     uses: jurplel/install-qt-action@v2
  #     with:
  #       version: '5.12.6' # 5.12.7 is broken https://bugreports.qt.io/browse/QTBUG-81715
  #       host: 'windows' # default: win64_msvc2017_64
  #       target: 'desktop'
  #       install-deps: 'true'
  #       modules: 'qtsvg'
  #       cached: 'false'
  #   - name: Install Miniconda
  #     shell: bash # uses git bash on windows
  #     run: |
  #         if [[ "${{ runner.os }}" == "Linux" ]]; then
  #           MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
  #           curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
  #           bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
  #         elif [[ "${{ runner.os }}" == "macOS" ]]; then
  #           MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
  #           curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
  #           bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
  #         elif [[ "${{ runner.os }}" == "Windows" ]]; then
  #           MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
  #           curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
  #           ./Miniconda3-latest-Windows-x86_64.exe //InstallationType=JustMe //RegisterPython=0 //S //D=$HOME/miniconda3
  #         fi

  #   - name: Configure x64 environment
  #     if: runner.os == 'Windows'
  #     run: OpenMS\.github\workflows\vsenv.bat -arch=x64 -host_arch=x64

  #   - name: Load contrib build
  #     run: |
  #         mkdir contribbld
  #         cd contribbld
  #         curl -o contribbld.tar.gz https://abibuilder.informatik.uni-tuebingen.de/archive/openms/contrib/windows/x64/msvc-14.2/contrib_build.tar.gz
  #         tar -xzf contribbld.tar.gz
  #         rm contribbld.tar.gz

  #   - name: Setup conda paths
  #     shell: bash
  #     run: |
  #       echo "::add-path::$HOME/miniconda3/bin"
  #       echo "::add-path::$HOME/miniconda3/Scripts"
  #   - name: Build
  #     shell: bash
  #     run: |
  #         # https://github.com/actions/virtual-environments/blob/master/images/win/Windows2019-Readme.md 
  #         # TODO: Better option to set VS path automatically
  #         export PATH="$PATH:/C/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise"
  #         mkdir bld
  #         pushd bld
  #         # TODO: set generator via variable, then we can share this step
  #         cmake -G "Visual Studio 16 2019" -A x64 -DOPENMS_CONTRIB_LIBS="$GITHUB_WORKSPACE/contribbld" -DCMAKE_PREFIX_PATH="$(echo $Qt5_Dir)/lib/cmake;${Qt5_Dir}" ../OpenMS
  #         cmake --build . --config Release --target OpenMS

  #         # Search for the latest 3 main python versions in the repository pkgs/main
  #         SUPPORTED_PYTHONS=$(conda search --full-name python | grep "pkgs/main" | awk '{print $2}' | cut -d '.' -f -2 | uniq | tail -3)

  #         echo $SUPPORTED_PYTHONS

  #         mkdir pyopenms_whls

  #         for py in $SUPPORTED_PYTHONS
  #         do
  #           conda create -n pyoms-bld-$py python=$py
  #           source activate pyoms-bld-$py

  #           # set current python executable
  #           CURRENT_PYTHON_EXECUTABLE=$(which python)

  #           # pip install all the stuff
  #           pip install -U setuptools
  #           pip install -U pip
  #           pip install -U autowrap
  #           pip install -U nose
  #           pip install -U numpy
  #           pip install -U wheel

  #           conda deactivate

  #           echo $CURRENT_PYTHON_EXECUTABLE

  #           # build pyopenms distribution
  #           cmake -DPYTHON_EXECUTABLE:FILEPATH=$CURRENT_PYTHON_EXECUTABLE -DPYOPENMS=ON .
  #           cmake --build . --config Release --target pyopenms

  #           # copy to directory
  #           cp pyOpenMS/dist/*.whl pyopenms_whls/
  #           # clean up
  #           conda remove --name pyoms-bld-$py --all
  #         done
          
  #   - uses: actions/upload-artifact@v1
  #     name: Upload artifacts
  #     with:
  #       name: winwheels
  #       path: bld/pyopenms_whls

  # build-macos:
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #     with:
  #       path: OpenMS
  #   - name: Install Qt
  #     uses: jurplel/install-qt-action@v2
  #     with:
  #       version: '5.12.7'
  #       host: 'mac'
  #       target: 'desktop'
  #       install-deps: 'true'
  #       modules: 'qtsvg'
  #       cached: 'false'
  #   - name: Install Miniconda
  #     shell: bash
  #     run: |
  #         if [[ "${{ runner.os }}" == "Linux" ]]; then
  #           MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
  #           curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
  #           bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
  #         elif [[ "${{ runner.os }}" == "macOS" ]]; then
  #           MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
  #           curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
  #           bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
  #         elif [[ "${{ runner.os }}" == "Windows" ]]; then
  #           MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
  #           curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
  #           ./Miniconda3-latest-Windows-x86_64.exe //InstallationType=JustMe //RegisterPython=0 //S
  #         fi

  #   - name: Setup conda paths
  #     shell: bash
  #     run: |
  #       echo "::add-path::$HOME/miniconda3/bin"
  #       echo "::add-path::$HOME/miniconda3/Scripts"

  #   - name: Install build tools
  #     run: brew install autoconf automake libtool

  #   - name: Cache contrib
  #     id: cache-contrib
  #     uses: actions/cache@v1
  #     with:
  #       path: contribbld
  #       key: ${{ runner.os }}-contrib

  #   # TODO cache or better download from contrib builds
  #   - name: Contrib build
  #     if: steps.cache-contrib.outputs.cache-hit != 'true'
  #     run: |
  #         pushd OpenMS
  #           git submodule update --init contrib
  #         popd

  #         export CC=clang
  #         export CXX=clang++
  #         export MACOSX_DEPLOYMENT_TARGET=10.9
  #         mkdir contribbld
  #         pushd contribbld
  #           cmake -DBUILD_TYPE=ALL -DNUMBER_OF_JOBS=4 ../OpenMS/contrib
  #           rm -rf archives
  #           rm -rf src
  #           rm -rf CMakeFiles
  #         popd

  #   - name: Build
  #     run: |
  #         export CC=clang
  #         export CXX=clang++
  #         export MACOSX_DEPLOYMENT_TARGET=10.9

  #         # create symlinks like brew https://github.com/Homebrew/homebrew-core/blob/master/Formula/qt.rb#L61
  #         pushd $Qt5_Dir/include
  #           for f in $Qt5_Dir/lib/*.framework/Headers
  #           do
  #             lnknm=$(basename "${f%/*}" ".framework")
  #             ln -s $f $lnknm
  #           done
  #         popd
  #         mkdir bld
  #         pushd bld
  #         # Use -DCMAKE_FIND_DEBUG_MODE=ON for debug
  #         cmake -DOPENMS_CONTRIB_LIBS="$GITHUB_WORKSPACE/contribbld" -DCMAKE_PREFIX_PATH="$(echo $Qt5_Dir)/lib/cmake;${Qt5_Dir}" -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DBOOST_USE_STATIC=ON ../OpenMS

  #         make -j4 OpenMS 

  #         # Search for the latest 3 main python versions in the repository pkgs/main
  #         SUPPORTED_PYTHONS=$(conda search --full-name python | grep "pkgs/main" | awk '{print $2}' | cut -d '.' -f -2 | uniq | tail -3)

  #         echo $SUPPORTED_PYTHONS

  #         mkdir pyopenms_whls

  #         for py in $SUPPORTED_PYTHONS
  #         do
  #           conda create -n pyoms-bld-$py python=$py
  #           source activate pyoms-bld-$py

  #           # set current python executable
  #           CURRENT_PYTHON_EXECUTABLE=$(which python)

  #           # pip install all the stuff
  #           pip install -U setuptools
  #           pip install -U pip
  #           pip install -U autowrap
  #           pip install -U nose
  #           pip install -U numpy
  #           pip install -U wheel

  #           conda deactivate

  #           echo $CURRENT_PYTHON_EXECUTABLE

  #           # build pyopenms distribution (macOS)
  #           cmake -DPYTHON_EXECUTABLE:FILEPATH=$CURRENT_PYTHON_EXECUTABLE -DPYOPENMS=ON .
  #           make -j4 pyopenms

  #           # copy to directory
  #           cp pyOpenMS/dist/*.whl pyopenms_whls/

  #           # clean up
  #           conda remove --name pyoms-bld-$py --all

  #         done

  #   - uses: actions/upload-artifact@v1
  #     name: Upload artifacts
  #     with:
  #       name: macwheels
  #       path: bld/pyopenms_whls

  # build-lnx:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    container: hroest/manylinux2014_qt59_contrib:v1.1

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: rokroskar/workflow-run-cleanup-action@master
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop'"

    - uses: actions/checkout@v2
      name: Checkout sources
      with:
        path: OpenMS

    - name: Build on manylinux2014
      run: |
            # Apply a patches / fixes
            # 1. Updated readme (due to pypi.org not displaying markdown)
            # 2. Updated version number
            # 3. Patch init (since the linked libraries are all in .lib)
            cd OpenMS
            wget https://raw.githubusercontent.com/hroest/OpenMS/0f3a2e8833d18fc54b7de86e6d67ab7349e828a0/src/pyOpenMS/README.rst -O src/pyOpenMS/README.rst
            patch -p0 src/pyOpenMS/pyopenms/__init__.py < src/pyOpenMS/dist-scripts/manylinux.patch
            patch -p0 src/pyOpenMS/setup.py < src/pyOpenMS/dist-scripts/manylinux.patch2 ## somehow required to link against regex boost lib
            cd /

            # fixes some issues with empty pxd files
            rm -rf /OpenMS/src/pyOpenMS/pxds/SwathMapMassCorrection.pxd


            # install Python deps
            for PYBIN in /opt/python/cp3*; do
              "$PYBIN/bin/pip" install -U Cython
              "$PYBIN/bin/pip" install -U setuptools
              "$PYBIN/bin/pip" install -U wheel==0.31.1
              "$PYBIN/bin/pip" install -U numpy
              "$PYBIN/bin/pip" install -U nose
              "$PYBIN/bin/pip" install -U autowrap==0.18.1
            done

            mkdir -p $GITHUB_WORKSPACE/data/wheelhouse/
            mkdir -p $GITHUB_WORKSPACE/data/wheelhouse/before_fix/

            LD_OLD_LIBRARY_PATH=$LD_LIBRARY_PATH

            # compile and configure OpenMS
            for PYBIN in /opt/python/cp3*; do

              PYVER=`basename $PYBIN`
              mkdir /openms-build-$PYVER
              cd /openms-build-$PYVER
              # configure
              cmake -DCMAKE_PREFIX_PATH="/contrib-build/" -DPYOPENMS=On -DPYTHON_EXECUTABLE:FILEPATH=$PYBIN/bin/python $GITHUB_WORKSPACE/OpenMS
              make -j4 pyopenms

              # ensure auditwheel can find the libraries
              export LD_LIBRARY_PATH=$LD_OLD_LIBRARY_PATH:`pwd`/lib
              # strip the libraries
              strip --strip-all lib/libOpenMS.so
              strip --strip-all lib/libOpenSwathAlgo.so
              strip --strip-all lib/libSuperHirn.so
              cd pyOpenMS
              # remove the libraries as auditwheel will take care of linked libs
              rm -rf pyopenms/lib*
              rm -rf build/lib*/pyopenms/lib*

              "$PYBIN/bin/pip" wheel . -w wheelhouse_tmp

              # Bundle external shared libraries into the wheels
              for whl in wheelhouse_tmp/pyopenms*.whl; do
                auditwheel repair "$whl" -w wheelhouse/
              done

              /usr/bin/cp wheelhouse/* $GITHUB_WORKSPACE/data/wheelhouse/before_fix/

              # Somehow auditwheelis broken and we get the wrong libraries here for
              # libcrypto and libssl, lets go and fix it ...
              yum install -y zip
              cd wheelhouse
              mkdir fix
              cp pyopenms-*.whl fix/fix.zip
              cd fix
              unzip fix.zip
              /usr/bin/cp /lib64/libssl.so.10  pyopenms/.libs/libssl-*
              /usr/bin/cp /lib64/libcrypto.so.10  pyopenms/.libs/libcrypto-*
              zip -r ../pyopenms-*.whl pyopenms/
              cd ../..
              rm -rf wheelhouse/fix/
              mv wheelhouse/* $GITHUB_WORKSPACE/data/wheelhouse/
            done

    - uses: actions/upload-artifact@v1
      name: Upload artifacts
      with:
        name: lnxwheels
        path: data/wheelhouse/

# Tests the build workflows
  test-macos:
    #needs: [build-macos]
    runs-on: macos-latest
    steps:
    - name: Install Miniconda
      shell: bash
      run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Linux-x86_64.sh
            curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
            bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-MacOSX-x86_64.sh
            curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
            bash ${MINICONDA_FILENAME} -b -f -p $HOME/miniconda3
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            MINICONDA_FILENAME=Miniconda3-latest-Windows-x86_64.exe
            curl -o $MINICONDA_FILENAME "https://repo.continuum.io/miniconda/$MINICONDA_FILENAME"
            ./Miniconda3-latest-Windows-x86_64.exe //InstallationType=JustMe //RegisterPython=0 //S
          fi

    - name: Setup conda paths
      shell: bash
      run: |
        echo "::add-path::$HOME/miniconda3/bin"
        echo "::add-path::$HOME/miniconda3/Scripts"

    - name: Download acrtifacts from macwheels
      #uses: actions/download-artifact@v1
      #with:
        #name: macwheels
      shell: bash 
      run: |  
        wget --no-parent -r -P $HOME/macwheels_abi "https://abibuilder.informatik.uni-tuebingen.de/archive/openms/pyopenms/macOS/"  

    - name: Test
      run: |
        # Search for the latest 3 main python versions in the repository pkgs/main
        SUPPORTED_PYTHONS=$(conda search --full-name python | grep "pkgs/main" | awk '{print $2}' | cut -d '.' -f -2 | uniq | tail -3)

        echo $SUPPORTED_PYTHONS

        for py in $SUPPORTED_PYTHONS
        do
          conda create -n pyoms-bld-$py python=$py
          source activate pyoms-bld-$py

          # Find .whl for current python version
          CURRENT_VERSION=$(echo $py | sed "s/\.//g") # remove "." for find
          CURRENT_WHL=$(find $HOME/macwheels_abi -name "*$CURRENT_VERSION*.whl") # Probably $GITHUB_WORKSPACE

          # pip install all the stuff
          pip install -U pip
          pip install 

          python -c "import sys; 'pyopenms' in sys.modules" # should be true after installation

          conda deactivate

          # clean up
          conda remove --name pyoms-bld-$py --all

        done

